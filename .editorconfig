# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size          = 4
insert_final_newline = false
charset              = utf-8-bom

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# CSS files
[*.css]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# JS files
[*.js]
indent_size = 2

# TypeScript files
[*.ts]
indent_size = 2

# CSharp code style settings:
[*.{cs,cake}]
csharp_prefer_braces                                               = true : warning

# This." and "Me." qualifiers
dotnet_style_qualification_for_field                               = false : warning
dotnet_style_qualification_for_property                            = false : warning
dotnet_style_qualification_for_method                              = false : warning
dotnet_style_qualification_for_event                               = false : warning

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members         = true : warning
dotnet_style_predefined_type_for_member_access                     = true : warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers                       = always : warning
csharp_preferred_modifier_order                                    = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : warning

# Suggest more modern language features when available
dotnet_style_object_initializer                                    = true : warning
dotnet_style_collection_initializer                                = true : warning
dotnet_style_coalesce_expression                                   = true : warning
dotnet_style_null_propagation                                      = true : warning
dotnet_style_explicit_tuple_names                                  = true : warning
dotnet_prefer_inferred_tuple_names                                 = true : suggestion
dotnet_prefer_inferred_anonymous_type_member_names                 = true : suggestion

# Prefer "var" everywhere
csharp_style_var_for_built_in_types                                = true : warning
csharp_style_var_when_type_is_apparent                             = true : warning
csharp_style_var_elsewhere                                         = true : warning

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods                             = when_on_single_line : suggestion
csharp_style_expression_bodied_constructors                        = when_on_single_line : suggestion
csharp_style_expression_bodied_operators                           = when_on_single_line : suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties                          = true : warning
csharp_style_expression_bodied_indexers                            = true : warning
csharp_style_expression_bodied_accessors                           = true : warning

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check              = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check              = true : suggestion
csharp_style_inlined_variable_declaration                          = true : warning

# Expression-level preferences
csharp_prefer_simple_default_expression                            = true : warning
csharp_style_deconstructed_variable_declaration                    = false : suggestion
csharp_style_pattern_local_over_anonymous_function                 = true : suggestion

# "Null" checking preferences
csharp_style_throw_expression                                      = true : warning
csharp_style_conditional_delegate_call                             = true : warning

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first                                = false : warning

# Newline settings
csharp_new_line_before_open_brace                                  = accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection, properties, types, namespaces
csharp_new_line_before_else                                        = true
csharp_new_line_before_catch                                       = true
csharp_new_line_before_finally                                     = true
csharp_new_line_before_members_in_object_initializers              = true
csharp_new_line_before_members_in_anonymous_types                  = true
csharp_new_line_between_query_expression_clauses                   = true

# Indentation Options
csharp_indent_case_contents                                        = true : warning
csharp_indent_switch_labels                                        = true : warning
csharp_indent_labels                                               = flush_left : warning

# Spacing Options
csharp_space_after_cast                                            = false : warning
csharp_space_after_keywords_in_control_flow_statements             = true : warning
csharp_space_between_method_declaration_parameter_list_parentheses = false : warning
csharp_space_between_method_call_parameter_list_parentheses        = false : warning

# Wrapping Options
csharp_preserve_single_line_statements                             = false : warning
csharp_preserve_single_line_blocks                                 = true : warning



# Naming Symbols
[*.{cs,cake}]
# constants - Define constant fields
dotnet_naming_symbols.constants.applicable_kinds                             = field, parameter
dotnet_naming_symbols.constants.required_modifiers                           = const

# non_private_readonly_fields - Define public, internal and protected readonly fields
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, internal, protected
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds           = field
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers         = readonly

# static_readonly_fields - Define static and readonly fields
dotnet_naming_symbols.static_readonly_fields.applicable_kinds                = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers              = static, readonly

# private_readonly_fields - Define private readonly fields
dotnet_naming_symbols.private_readonly_fields.applicable_accessibilities     = private
dotnet_naming_symbols.private_readonly_fields.applicable_kinds               = field
dotnet_naming_symbols.private_readonly_fields.required_modifiers             = readonly

# public_internal_fields - Define public and internal fields
dotnet_naming_symbols.public_internal_fields.applicable_accessibilities      = public, internal
dotnet_naming_symbols.public_internal_fields.applicable_kinds                = field

# private_protected_fields - Define private and protected fields
dotnet_naming_symbols.private_protected_fields.applicable_accessibilities    = private, protected
dotnet_naming_symbols.private_protected_fields.applicable_kinds              = field

# public_symbols - Define any public symbol
dotnet_naming_symbols.public_symbols.applicable_accessibilities              = public, internal, protected, protected_internal
dotnet_naming_symbols.public_symbols.applicable_kinds                        = method, property, event, delegate

# parameters - Defines any parameter
dotnet_naming_symbols.parameters.applicable_kinds                            = parameter

# class_types - Defines class, struct, and delegate types
dotnet_naming_symbols.class_types.applicable_kinds                           = class, struct, delegate

# interface_types - Defines interfaces
dotnet_naming_symbols.interface_types.applicable_kinds                       = interface

# interface_types - Defines interfaces
dotnet_naming_symbols.enum_types.applicable_kinds                            = enum

# Naming Styles

# camel_case - Define the camelCase style
dotnet_naming_style.camel_case.capitalization                                = camel_case

# pascal_case - Define the Pascal_case style
dotnet_naming_style.pascal_case.capitalization                               = pascal_case

# all_upper - Define the ALL_UPPER style
dotnet_naming_style.all_upper.capitalization                                 = all_upper

# first_upper - The first character must start with an upper-case character
dotnet_naming_style.first_upper.capitalization                               = first_word_upper

# prefix_interface_with_i - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i.capitalization         = pascal_case
dotnet_naming_style.prefix_interface_with_i.required_prefix        = I

# suffix_enum_with_enum - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.suffix_enum_with_enum.capitalization                     = pascal_case
dotnet_naming_style.suffix_enum_with_enum.required_suffix                    = Enum

# Naming Rules

# Constant fields must be ALL_UPPER
dotnet_naming_rule.constants_must_be_all_upper.symbols                       = constants
dotnet_naming_rule.constants_must_be_all_upper.style                         = all_upper
dotnet_naming_rule.constants_must_be_all_upper.severity                      = warning

# Public, internal and protected readonly fields must be PascalCase
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.severity  = warning
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.symbols   = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.style     = pascal_case

# Static readonly fields must be PascalCase
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.severity       = warning
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.symbols        = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.style          = pascal_case

# Private readonly fields must be camelCase
dotnet_naming_rule.private_readonly_fields_must_be_camel_case.severity       = warning
dotnet_naming_rule.private_readonly_fields_must_be_camel_case.symbols        = private_readonly_fields
dotnet_naming_rule.private_readonly_fields_must_be_camel_case.style          = camel_case

# Public and internal fields must be PascalCase
dotnet_naming_rule.public_internal_fields_must_be_pascal_case.severity       = warning
dotnet_naming_rule.public_internal_fields_must_be_pascal_case.symbols        = public_internal_fields
dotnet_naming_rule.public_internal_fields_must_be_pascal_case.style          = pascal_case

# Private and protected fields must be camelCase
dotnet_naming_rule.private_protected_fields_must_be_camel_case.severity      = warning
dotnet_naming_rule.private_protected_fields_must_be_camel_case.symbols       = private_protected_fields
dotnet_naming_rule.private_protected_fields_must_be_camel_case.style         = camel_case

# Public members must be capitalized
dotnet_naming_rule.public_members_must_be_capitalized.severity               = warning
dotnet_naming_rule.public_members_must_be_capitalized.symbols                = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style                  = first_upper

# Parameters must be camelCase
dotnet_naming_rule.parameters_must_be_camel_case.severity                    = warning
dotnet_naming_rule.parameters_must_be_camel_case.symbols                     = parameters
dotnet_naming_rule.parameters_must_be_camel_case.style                       = camel_case

# Class, struct, enum and delegates must be PascalCase
dotnet_naming_rule.class_types_must_be_pascal_case.severity                  = warning
dotnet_naming_rule.class_types_must_be_pascal_case.symbols                   = class_types
dotnet_naming_rule.class_types_must_be_pascal_case.style                     = pascal_case

# Interfaces must be PascalCase and start with an 'I'
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.severity          = warning
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.symbols           = interface_types
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.style             = prefix_interface_with_i

# Enums must be PascalCase and end with an 'Enum'
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.severity            = warning
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.symbols             = enum_types
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.style               = suffix_enum_with_enum