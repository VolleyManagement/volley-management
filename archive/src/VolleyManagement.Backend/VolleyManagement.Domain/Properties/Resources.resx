<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DivisionCountOutOfRange" xml:space="preserve">
    <value>The number of divisions in the tournament must be between {0} and {1}</value>
  </data>
  <data name="DivisionNamesNotUnique" xml:space="preserve">
    <value>Divisions can not have the same name</value>
  </data>
  <data name="FeedbackContentParam" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="FeedbackUsersEmailParam" xml:space="preserve">
    <value>UsersEmail</value>
  </data>
  <data name="GameResultFifthSetScoreInvalid" xml:space="preserve">
    <value>In fifth set, the number of points for one team must be at least {0} and the points difference should be at least {1}. If the score exceeds {0}, the points difference must be equal to {1}.</value>
  </data>
  <data name="GameResultOptionalSetScores" xml:space="preserve">
    <value>In the set, the number of points for one team must be at least {0} and the points difference should be at least {1}. If the score exceeds {0}, the points difference must be equal to {1}. In case of a technical defeat score of an optional game should be {2}: {3}</value>
  </data>
  <data name="GameResultPreviousOptionalSetUnplayed" xml:space="preserve">
    <value>Enter a score of the previous optional game</value>
  </data>
  <data name="GameResultRequiredSetScores" xml:space="preserve">
    <value>In the set, the number of points for one team must be at least {0} and the points difference should be at least {1}. If the score exceeds {0}, the points difference must be equal to {1}. In case of a technical defeat score of an optional game should be {2}: {3} or {3}: {2}</value>
  </data>
  <data name="GameResultSameTeam" xml:space="preserve">
    <value>The team can not play with itself</value>
  </data>
  <data name="GameResultSetScoresNotOrdered" xml:space="preserve">
    <value>The set scores are listed in the wrong order</value>
  </data>
  <data name="GameResultSetsScoreInvalid" xml:space="preserve">
    <value>The set score can be one of the following: 3:0, 3:1, 3:2, 2:3, 1:3, 0:3. In case of a technical defeat set score must be {0}:{1} or {1}:{0}</value>
  </data>
  <data name="GameResultSetsScoreNoMatchSetScores" xml:space="preserve">
    <value>Game score does not match set scores</value>
  </data>
  <data name="GroupCountOutOfRange" xml:space="preserve">
    <value>An amount of groups in division should be between {0} and {1}</value>
  </data>
  <data name="GroupNamesNotUnique" xml:space="preserve">
    <value>Group names should be unique</value>
  </data>
  <data name="HomeTeamNullId" xml:space="preserve">
    <value>Home team can't be set to freeday</value>
  </data>
  <data name="InvalidTransferEndpoint" xml:space="preserve">
    <value>End of the transfer period should be before the end of the tournament</value>
  </data>
  <data name="LateRegistrationDates" xml:space="preserve">
    <value>Start of the applying period must be later than today</value>
  </data>
  <data name="NoSuchToruanment" xml:space="preserve">
    <value>Game cannot be added to the tournament that doesn't exist</value>
  </data>
  <data name="NoTeamsInGame" xml:space="preserve">
    <value>No teams are specified for current game in round {0}</value>
  </data>
  <data name="RoundDateNotSet" xml:space="preserve">
    <value>Game date not set.</value>
  </data>
  <data name="PlayoffGameEditingError" xml:space="preserve">
    <value>Editing of the old game is not allowed</value>
  </data>
  <data name="SameFreeDayGameInRound" xml:space="preserve">
    <value>Free day game has already been scheduled in this round</value>
  </data>
  <data name="SameGameInRound" xml:space="preserve">
    <value>Game between {0} and {1} has already been scheduled for round number {2}</value>
  </data>
  <data name="SameGameInTournamentSchemeOne" xml:space="preserve">
    <value>Game between {0} and {1} has already been scheduled in another round. Same teams cannot play twice in one round tournament</value>
  </data>
  <data name="SameGameInTournamentSchemeTwo" xml:space="preserve">
    <value>Game between {0} and {1} has already been scheduled in two other rounds. Same teams connot play more than 2 times in two round tournament</value>
  </data>
  <data name="SameTeamInRound" xml:space="preserve">
    <value>Team {0} has game scheduled already in this round</value>
  </data>
  <data name="TeamNameInTournamentNotUnique" xml:space="preserve">
    <value>Team with such name already exists in tournament</value>
  </data>
  <data name="TournamentNameMustBeUnique" xml:space="preserve">
    <value>Tournament name should be unique</value>
  </data>
  <data name="TransferEndMissing" xml:space="preserve">
    <value>If there is a transfer, it's necessary to specify the end date of the transfer period</value>
  </data>
  <data name="TransferStartMissing" xml:space="preserve">
    <value>If there is a transfer, it's necessary to specify the start date of the transfer period</value>
  </data>
  <data name="UniqueNameMessage" xml:space="preserve">
    <value>Tournament name should be unique</value>
  </data>
  <data name="ValidationCoachName" xml:space="preserve">
    <value>Coach name can not contain more than  {0} symbols; The field must contain only letters</value>
  </data>
  <data name="ValidationDivisionName" xml:space="preserve">
    <value>Please, enter the valid name of the division</value>
  </data>
  <data name="ValidationFeedbackContent" xml:space="preserve">
    <value>Content can't be empty or contains more than {0} symbols</value>
  </data>
  <data name="ValidationFeedbackUsersEmail" xml:space="preserve">
    <value>Email can't be empty or contains more than {0} symbols</value>
  </data>
  <data name="ValidationGroupName" xml:space="preserve">
    <value>Please, enter the valid name of the group</value>
  </data>
  <data name="ValidationPlayerBirthYear" xml:space="preserve">
    <value>Please enter the valid birth date</value>
  </data>
  <data name="ValidationPlayerFirstName" xml:space="preserve">
    <value>Please, enter the valid first name</value>
  </data>
  <data name="ValidationPlayerHeight" xml:space="preserve">
    <value>Please, enter the valid height</value>
  </data>
  <data name="ValidationPlayerLastName" xml:space="preserve">
    <value>Please, enter the valid last name</value>
  </data>
  <data name="ValidationPlayerWeight" xml:space="preserve">
    <value>Please, enter the valid weight</value>
  </data>
  <data name="ValidationTeamAchievements" xml:space="preserve">
    <value>Team achievements can not contain more than  {0} symbols</value>
  </data>
  <data name="ValidationTeamCaptain" xml:space="preserve">
    <value>Captain's id is smaller, than required</value>
  </data>
  <data name="ValidationTeamName" xml:space="preserve">
    <value>Team name can not contain more than  {0} symbols; The field can not be empty</value>
  </data>
  <data name="ValidationTeamRoster" xml:space="preserve">
    <value>Passed roster is inappropriate</value>
  </data>
  <data name="WrongDeletingGame" xml:space="preserve">
    <value>Game can not be deleted because it has already ended</value>
  </data>
  <data name="WrongRegistrationDatesPeriod" xml:space="preserve">
    <value>Start of the applying period must be earlier than its end</value>
  </data>
  <data name="WrongRegistrationGames" xml:space="preserve">
    <value>Games should start after the end of the applying period</value>
  </data>
  <data name="WrongRoundDate" xml:space="preserve">
    <value>Start of the round should not be earlier than the start of the tournament or later than the end of the tournament</value>
  </data>
  <data name="WrongStartTournamentDates" xml:space="preserve">
    <value>Start of the tournament must be eariler than its end</value>
  </data>
  <data name="WrongThreeMonthRule" xml:space="preserve">
    <value>Applying period is less than 3 months</value>
  </data>
  <data name="WrongTransferPeriod" xml:space="preserve">
    <value>Start of the transfer period must be earlier than its end</value>
  </data>
  <data name="WrongTransferStart" xml:space="preserve">
    <value>Start of the transfer window should be later than the games start</value>
  </data>
  <data name="FeedbackUserEnvironmentParam" xml:space="preserve">
    <value>User environment</value>
  </data>
  <data name="ValidationFeedbackUserEnvironment" xml:space="preserve">
    <value>User environment info cannot contain more than {0} symbols</value>
  </data>
  <data name="FeedbackStatusParam" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="ValidationFeedbackStatus" xml:space="preserve">
    <value>Feedback status can't be changed to this status</value>
  </data>
  <data name="MailBodyParam" xml:space="preserve">
    <value>Body</value>
  </data>
  <data name="MailFromParam" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="MailToParam" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="ValidationMailBody" xml:space="preserve">
    <value>Body should be less than {0} symbols or not empty</value>
  </data>
  <data name="ValidationMailEmail" xml:space="preserve">
    <value>Please, enter the valid email.</value>
  </data>
  <data name="InvalidArgumentException" xml:space="preserve">
    <value>Invalid parametr. Your request didn't create.</value>
  </data>
  <data name="ValidationTeamId" xml:space="preserve">
    <value>Team's id is wrong</value>
  </data>
  <data name="ValidationTournamentId" xml:space="preserve">
    <value>Tournament's id is wrong</value>
  </data>
  <data name="ValidationPlayerId" xml:space="preserve">
    <value>Player's id is wrong</value>
  </data>
  <data name="ValidationUserId" xml:space="preserve">
    <value>User's id is wrong</value>
  </data>
  <data name="ValidationDivisionId" xml:space="preserve">
    <value>Division's id is wrong</value>
  </data>
  <data name="ValidationGroupId" xml:space="preserve">
    <value>Group's id is wrong</value>
  </data>
  <data name="TeamNameInCurrentGroupOfTournamentNotUnique" xml:space="preserve">
    <value>Team with such name in the current group of the tournament already exist</value>
  </data>
  <data name="CollectionIsEmpty" xml:space="preserve">
    <value>Teams and groups are empty</value>
  </data>
  <data name="TournamentWasNotFound" xml:space="preserve">
    <value>There was not found such tournament</value>
  </data>
  <data name="ValidationPlayerOfAnotherTeam" xml:space="preserve">
    <value>Player already plays in another team</value>
  </data>
  <data name="RemovingCaptain" xml:space="preserve">
    <value>Cannot remove current captain of the team</value>
  </data>
  <data name="AddingMemberedPlayerToTeam" xml:space="preserve">
    <value>Player is already a member of the team</value>
  </data>
  <data name="RemovingUnmemberedPlayerFromTeam" xml:space="preserve">
    <value>Cannot unmember the player, which is not a part of the team</value>
  </data>
</root>