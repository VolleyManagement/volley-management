<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDivision" xml:space="preserve">
    <value>+ Add division</value>
  </data>
  <data name="AddGameResult" xml:space="preserve">
    <value>Add game result</value>
  </data>
  <data name="AddGroup" xml:space="preserve">
    <value>+ Add group</value>
  </data>
  <data name="BackToList" xml:space="preserve">
    <value>Back to list</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateNewTournament" xml:space="preserve">
    <value>Create new tournament</value>
  </data>
  <data name="CreateTournamentTitle" xml:space="preserve">
    <value>Creating new tournament</value>
  </data>
  <data name="CurrentTournamentsHeader" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteConfirm" xml:space="preserve">
    <value>Are you sure you want to delete this?</value>
  </data>
  <data name="DeleteTournamentTitle" xml:space="preserve">
    <value>Deleting tournament</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditTournamentTitle" xml:space="preserve">
    <value>Editing tournament</value>
  </data>
  <data name="FinishedTournaments" xml:space="preserve">
    <value>Show finished</value>
  </data>
  <data name="FinishedTournamentsHeader" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="RegistrationFieldsTitle" xml:space="preserve">
    <value>Applying period</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ShowTournamentStandings" xml:space="preserve">
    <value>Show tournament table</value>
  </data>
  <data name="ShowGameResults" xml:space="preserve">
    <value>Show game results</value>
  </data>
  <data name="TournamentDetailsTitle" xml:space="preserve">
    <value>Tournament details</value>
  </data>
  <data name="TournamentFieldsTitle" xml:space="preserve">
    <value>Tournament</value>
  </data>
  <data name="TournamentLegend" xml:space="preserve">
    <value>Tournament</value>
  </data>
  <data name="TournamentsIndexTitle" xml:space="preserve">
    <value>Tournaments</value>
  </data>
  <data name="TransferFieldsTitle" xml:space="preserve">
    <value>Transfer period</value>
  </data>
  <data name="UpcomingTournamentsHeader" xml:space="preserve">
    <value>Upcoming</value>
  </data>
  <data name="NoGamesScheduled" xml:space="preserve">
    <value>No games were scheduled yet</value>
  </data>
  <data name="Round" xml:space="preserve">
    <value>Round</value>
  </data>
  <data name="Schedule" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="ScheduleGame" xml:space="preserve">
    <value>Schedule game</value>
  </data>
  <data name="ScheduleTitle" xml:space="preserve">
    <value>Schedule for</value>
  </data>
  <data name="ManageTeams" xml:space="preserve">
    <value>Manage Teams</value>
  </data>
  <data name="DeleteTournamentTeamConfirm" xml:space="preserve">
    <value>Are you sure you want to delete this team?</value>
  </data>
  <data name="TournamentTeamIsNotSelected" xml:space="preserve">
    <value>No team is selected</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreateOneMore" xml:space="preserve">
    <value>Create one more</value>
  </data>
  <data name="FreeDay" xml:space="preserve">
    <value>Free day</value>
  </data>
  <data name="ScheduleGameLegend" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="ScheduleGameTitle" xml:space="preserve">
    <value>Schedule game</value>
  </data>
  <data name="TeamDayOff" xml:space="preserve">
    <value>Day off</value>
  </data>
  <data name="EditScheduledGameTitle" xml:space="preserve">
    <value>Edit scheduled game</value>
  </data>
  <data name="GameNotFoundInTournament" xml:space="preserve">
    <value>Game was not found in the tournament</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="NoTeamsAvailable" xml:space="preserve">
    <value>No teams available in the tournament</value>
  </data>
  <data name="AwayTeamPlaceholder" xml:space="preserve">
    <value>Team 2</value>
  </data>
  <data name="HomeTeamPlaceholder" xml:space="preserve">
    <value>Team 1</value>
  </data>
  <data name="BronzeGameName" xml:space="preserve">
    <value>Bronze match</value>
  </data>
  <data name="FinalGameName" xml:space="preserve">
    <value>Final match</value>
  </data>
  <data name="ApplyForTournament" xml:space="preserve">
    <value>Apply For Tournament</value>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Applications to Tournaments</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Decline" xml:space="preserve">
    <value>Decline</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="NoApplication" xml:space="preserve">
    <value>No Application</value>
  </data>
  <data name="RemoveGroup" xml:space="preserve">
    <value>Remove group</value>
  </data>
  <data name="RemoveDivision" xml:space="preserve">
    <value>Remove division</value>
  </data>
  <data name="TournamentDivisionIsNotSelected" xml:space="preserve">
    <value>No division is selected</value>
  </data>
  <data name="TournamentGroupIsNotSelected" xml:space="preserve">
    <value>No group is selected</value>
  </data>
  <data name="ArchivedTournamentsIndexTitle" xml:space="preserve">
    <value>Archived tournaments</value>
  </data>
</root>