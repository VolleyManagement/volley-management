name: Volley Management-3.0$(Rev:.r)

variables:
  docker_repository_name: sdiachen/volleymanagement
  sln_path: ./src/VolleyManagement.sln

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
      - docs/*
      - dev-env/*
      - archive/*

pr:
  autoCancel: true
  branches:
    include:
    - master

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: build_code
        pool:
          vmImage: 'ubuntu-latest'
        displayName: Source Code
        steps:
          - template: build/azure-pipeline/setup-dotnet-cli.yml
          - task: DotNetCoreCLI@2
            displayName: .net build
            inputs:
              command: 'build'
              projects: $(sln_path)
              arguments: '-c Release -o $(Build.ArtifactStagingDirectory)'
          - task: DotNetCoreCLI@2
            displayName: .net test
            inputs:
              command: 'test'
              testRunTitle: 'Unit Tests'
              projects: $(sln_path)
              arguments: '--filter Category=unit'
          - publish: $(Build.SourcesDirectory)/tests/unit-tests #note: files which are published controlled by .artifactignore file
            artifact: unitTestsResults
            condition: succeededOrFailed() #publish even if tests failed - it is useful for debugging
          - pwsh: ./migrations/publish-azure-storage-migration.ps1
            displayName: Preapre Azure Storage migration
          - publish: $(Build.SourcesDirectory)/migrations/azure-storage-migrations
            artifact: azureStorageMigration
      - job: container_build
        displayName: Container
        dependsOn: build_code
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: build/azure-pipeline/set-docker-tag.yml
          - task: Docker@2
            displayName: Docker Build and Push
            inputs:
              containerRegistry: 'VM on Personal DockerHub'
              repository: $(docker_repository_name)
              command: 'buildAndPush'
              Dockerfile: './Dockerfile'
              buildContext: '.'
              tags: $(image_tag)
  - stage: integration
    displayName: "Integration"
    dependsOn: build
    jobs:
      - job: integration_test
        displayName: Integration Tests
        steps:
          - template: build/azure-pipeline/setup-dotnet-cli.yml
          - script: |
              echo "##vso[task.setvariable variable=VOLLEYM_TESTTARGET;]AzureCloud"
              echo "##vso[task.setvariable variable=VOLLEYM_IDENTITYCONTEXTTABLESTORAGEOPTIONS__CONNECTIONSTRING;]$(vm_azstorage_connection_string_staging)"
          - task: DotNetCoreCLI@2
            displayName: .NET test
            inputs:
              command: 'test'
              testRunTitle: 'Azure Cloud Integration Tests'
              projects: $(sln_path)
              arguments: '--filter Category=azurecloud'
          - publish: $(Build.SourcesDirectory)/tests/unit-tests #note: files which are published controlled by .artifactignore file
            artifact: integrationTestsResults
            condition: succeededOrFailed() #publish even if tests failed - it is useful for debugging
      - job: azure_storage_migrations
        displayName: Run Azure Storage Migrations
        steps:
          - download: current
            artifact: azureStorageMigration
          - template: build/azure-pipeline/setup-dotnet-cli.yml
          - pwsh: |
              cd $(Pipeline.Workspace)/azureStorageMigration
              dotnet VolleyM.Tools.MigrationTool.dll 
            displayName: Run migration
            env:
              VOLLEYM_MIGRATION_ENVIRONMENTNAME: Staging
              VOLLEYM_MIGRATION_IDENTITYCONTEXTTABLESTORAGEOPTIONS__CONNECTIONSTRING: $(vm_azstorage_connection_string_staging)
      - job: deploy_app_service_int
        displayName: Deploy App Service
        dependsOn:
        - azure_storage_migrations
        steps:
          - template: build/azure-pipeline/set-docker-tag.yml
          - task: AzureWebAppContainer@1
            displayName: 'Deploy App Service'
            inputs:
              azureSubscription: 'Azure VM Integration'
              appName: 'staging-volley-mgmt'
              containers: '$(docker_repository_name):$(image_tag)'
              appSettings: >-
                -ASPNETCORE_ENVIRONMENT Staging
                -IDENTITYCONTEXTTABLESTORAGEOPTIONS__CONNECTIONSTRING $(vm_azstorage_connection_string_staging)
      - job: run_api_tests
        displayName: API Tests
        dependsOn:
        - deploy_app_service_int
        steps:
          - task: UniversalPackages@0
            displayName: 'Download Karate from Artifacts'
            inputs:
              command: download
              vstsFeed: 'VolleyManagement'
              vstsFeedPackage: 'karate'
              vstsPackageVersion: '0.9.4'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
          - script: |
              cd tests/api-tests
              java -jar $(System.DefaultWorkingDirectory)/karate.jar -e staging .
            env:
              VM_KARATE_AUTH0_CLIENT_SECRET: $(vm_api_tests_auth0_secret)
            displayName: 'Run Karate tests'
  - stage: deploy_prod
    displayName: 'Deploy Production'
    dependsOn: integration
    condition: and(succeeded(), eq(0, variables['System.PullRequest.PullRequestId']), eq(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - job: azure_storage_migrations
        displayName: Run Azure Storage Migrations
        steps:
          - download: current
            artifact: azureStorageMigration
          - template: build/azure-pipeline/setup-dotnet-cli.yml
          - pwsh: |
              cd $(Pipeline.Workspace)/azureStorageMigration
              dotnet VolleyM.Tools.MigrationTool.dll 
            displayName: Run migration
            env:
              VOLLEYM_MIGRATION_ENVIRONMENTNAME: Production
              VOLLEYM_MIGRATION_IDENTITYCONTEXTTABLESTORAGEOPTIONS__CONNECTIONSTRING: $(vm_azstorage_connection_string_production)
      - job: deploy_app_service_prod
        displayName: Deploy App Service
        dependsOn:
          azure_storage_migrations
        steps:
          - template: build/azure-pipeline/set-docker-tag.yml
          - task: AzureWebAppContainer@1
            displayName: 'Deploy App Service'
            inputs:
              azureSubscription: 'Azure VM Prod'
              appName: 'volley-prod'
              containers: '$(docker_repository_name):$(image_tag)'
              appSettings: >-
                -ASPNETCORE_ENVIRONMENT Production
                -IDENTITYCONTEXTTABLESTORAGEOPTIONS__CONNECTIONSTRING $(vm_azstorage_connection_string_production)