name: Volley Management-3.0$(Rev:.r)

variables:
  docker_repository_name: sdiachen/volleymanagement

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
      - docs/*
      - dev-env/*

pr:
  autoCancel: true
  branches:
    include:
    - master

stages:
  - stage: build
    displayName: 'Build'
    jobs:
      - job: build_code
        pool:
          vmImage: 'ubuntu-latest'
        displayName: Build Source Code
        steps:
          - task: DotNetCoreInstaller@0
            displayName: 'Install .net core 3.0 (preview)'
            inputs:
              version: '3.0.100-preview8-013656'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: './src/VolleyManagement.sln'
              arguments: '-c Release -o artifacts'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              projects: './src/VolleyManagement.sln'
              arguments: '--logger "trx;LogFileName=artifacts/test-results/vm-ut-result.trx"'
      - job: container_build
        displayName: Build Container
        dependsOn: build_code
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: build/azure-pipeline/set-docker-tag.yml
          - script: |
              docker build --target build -t $(docker_repository_name):$(image_tag) . 
              docker create -ti --name testcontainer $(docker_repository_name):$(image_tag) 
              docker cp testcontainer:/build-dir/test-results/ $(Build.ArtifactStagingDirectory)/test-results 
              docker rm -fv testcontainer
            displayName: Build and run unit tests
          - task: Docker@2
            displayName: Docker Build and Push
            inputs:
              containerRegistry: 'VM on Personal DockerHub'
              repository: $(docker_repository_name)
              command: 'buildAndPush'
              Dockerfile: './Dockerfile'
              buildContext: '.'
              tags: $(image_tag)
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: 'vm-ut-result.trx'
              searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
              mergeTestResults: true
              testRunTitle: 'Unit Tests' 
  - stage: deploy_prod
    displayName: 'Deploy Production'
    dependsOn: build
    condition: and(succeeded(), eq(0, variables['System.PullRequest.PullRequestId']), eq(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - job: deploy_app_service
        displayName: Deploy App Service
        steps:
          - template: build/azure-pipeline/set-docker-tag.yml
          - task: AzureWebAppContainer@1
            displayName: 'Deploy App Service'
            inputs:
              azureSubscription: 'Azure Main'
              appName: 'volley-prod'
              containers: '$(docker_repository_name):$(image_tag)'