name: Volley Management - 3.0$(Rev:.r)

variables:
  docker_repository_name: sdiachen/volleymanagement
  is_pull_request: false

trigger:
- master
- Release
- issue/*

stages:
  - stage: 'Build'
    jobs:
      - job: container_build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              if [ "$(Build.SourceBranchName)" == "master" ]; then
                echo "Versioning for master build"
                version=$(echo "$(Build.BuildNumber)" | cut -d "-" -f 2)
                echo "##vso[task.setvariable variable=version]$version"
                echo "##vso[task.setvariable variable=image_name]$(docker_repository_name):$version"
              elif [ -n "$(System.PullRequest.PullRequestId)" ]; then
                echo "Versioning for PR build"
                version=0.$(System.PullRequest.PullRequestId).$(build.buildId)
                echo "##vso[task.setvariable variable=version]$version"
                echo "##vso[task.setvariable variable=image_name]$(docker_repository_name):$version-pr"
              else
                echo "Branch is not for master nor a pull request"
                exit 1
              fi
            displayName: 'Check Pull Request variables'
          - task: Docker@2
            displayName: Docker Build
            inputs:
              command: 'build'
              Dockerfile: './src/VolleyManagement.API/Dockerfile'
              buildContext: './src'
              arguments: '--version=$(version)'
              addPipelineData: false
              tags: $(image_name)
          - task: Docker@2
            displayName: Docker Push Version
            inputs:
              containerRegistry: 'VM on Personal DockerHub'
              repository: '$(docker_repository_name)'
              command: 'push'
              tags: $(image_name)
              addPipelineData: false
          - task: Docker@2
            condition: eq('${{ variables['System.PullRequest.PullRequestId'] }}', 0)
            displayName: Docker Push Latest
            inputs:
              containerRegistry: 'VM on Personal DockerHub'
              repository: '$(docker_repository_name)'
              command: 'push'
              tags: latest
              addPipelineData: false
