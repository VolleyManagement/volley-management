@model VolleyManagement.UI.Areas.Mvc.ViewModels.Tournaments.TournamentViewModel
@using VolleyManagement.Crosscutting.Contracts.Extensions
@using VolleyManagement.Domain.RolesAggregate
@using VolleyManagement.UI.Areas.Mvc;

@{
    ViewBag.Title = Resources.UI.TournamentViews.TournamentDetailsTitle;
}

<h2>@ViewBag.Title</h2>

<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.js")" type="text/javascript"></script>
<script>
    var onArchiveSuccess = function() {
        alert('Tournament was successfully archived');
    };
</script>

<fieldset>
    <legend>@Resources.UI.TournamentViews.TournamentLegend</legend>

    <div class="display-label">@Html.LabelFor(model => model.Name)</div>
    <div class="display-field">@Model.Name</div>

    <div class="display-label">@Html.LabelFor(model => model.Description)</div>
    <div class="display-field">@Html.DisplayFor(model => model.Description)</div>

    <div class="display-label">@Html.LabelFor(model => model.Season)</div>
    <div class="display-field">@Html.DisplaySeason(Model.Season)</div>

    <div class="display-label">@Html.LabelFor(model => model.Scheme)</div>
    <div class="display-field">@Model.Scheme.ToDescription()</div>

    <div class="display-label">@Html.LabelFor(model => model.RegulationsLink)</div>
    @if (!string.IsNullOrEmpty(Model.RegulationsLink))
    {
    <div class="display-field">
        <a href=@Model.RegulationsLink target="_blank">@Model.RegulationsLink</a>
    </div>
    }

    <div class="display-label">@Html.LabelFor(model => model.ApplyingPeriodStart)</div>
    <div class="display-field">@Model.ApplyingPeriodStart.ToShortDateString()</div>

    <div class="display-label">@Html.LabelFor(model => model.ApplyingPeriodEnd)</div>
    <div class="display-field">@Model.ApplyingPeriodEnd.ToShortDateString()</div>

    <div class="display-label">@Html.LabelFor(model => model.GamesStart)</div>
    <div class="display-field">@Model.GamesStart.ToShortDateString()</div>

    <div class="display-label">@Html.LabelFor(model => model.GamesEnd)</div>
    <div class="display-field">@Model.GamesEnd.ToShortDateString()</div>

    @if (Model.IsTransferEnabled)
    {
    <div class="display-label">@Html.LabelFor(model => model.TransferStart)</div>
    <div class="display-field">@(((DateTime)Model.TransferStart).ToShortDateString())</div>

    <div class="display-label">@Html.LabelFor(model => model.TransferEnd)</div>
    <div class="display-field">@(((DateTime)Model.TransferEnd).ToShortDateString())</div>
    }
    @if (Model.Divisions.Count > 1 || Model.Divisions[0].Groups.Count > 1)
    {
    <div class="display-label">@Html.LabelFor(model => model.Divisions)</div>
        for (int i = 0; i < Model.Divisions.Count; i++)
        {
    <div class="display-field">@Html.DisplayFor(model => model.Divisions[i].Name)</div>
    <div class="display-label">&nbsp;&nbsp;&nbsp;@Html.LabelFor(model => model.Divisions[i].Groups)</div>
            for (int j = 0; j < Model.Divisions[i].Groups.Count; j++)
            {
    <div class="display-field">&nbsp;&nbsp;&nbsp;@Html.DisplayFor(model => model.Divisions[i].Groups[j].Name)</div>
            }
        }
    }

    <div>
        @Html.ActionLink(
            Resources.UI.TournamentViews.ShowGameResults,
            "TournamentResults",
            "GameResults",
            new { tournamentId = Model.Id, tournamentName = Model.Name },
            null)
    </div>
    <div>
        @Html.ActionLink(
            Resources.UI.TournamentViews.ShowTournamentStandings,
            "Standings",
            "GameReports",
            new { tournamentId = Model.Id, tournamentName = Model.Name },
            null)
    </div>
    @if (Model.Authorization.IsAllowed(AuthOperations.Tournaments.ManageTeams))
    {
    <div>
        @Html.ActionLink(
            Resources.UI.TournamentViews.ManageTeams,
            "ManageTournamentTeams",
            "Tournaments",
            new { tournamentId = Model.Id },
            null)
    </div>
    }
    <div>
        @Html.ActionLink(
            Resources.UI.TournamentViews.Schedule,
            "ShowSchedule",
            new {tournamentId = Model.Id})
    </div>
    <div>
        @Html.ActionLink(
           Resources.UI.TournamentViews.ApplyForTournament,
           "ApplyForTournament",
           new { tournamentId = Model.Id })
    </div>
    @if (Model.Authorization.IsAllowed(AuthOperations.Tournaments.Archive))
    {
    <div>
        @Ajax.ActionLink(
                "Archive Tournament",
                "Archive",
                "Tournaments",
                new {
                    tournamentId = Model.Id
                },
                new AjaxOptions {
                    HttpMethod = "POST",
                    OnSuccess = "onArchiveSuccess"
                }
                )
    </div>
    }
</fieldset>
<p>
    @if (Model.Authorization.IsAllowed(AuthOperations.Tournaments.Edit))
    {
    @Html.ActionLink(Resources.UI.TournamentViews.Edit, "Edit", new { id = Model.Id })  @:|
    }
    @Html.ActionLink(Resources.UI.TournamentViews.BackToList, "Index")
</p>