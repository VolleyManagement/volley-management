@using VolleyManagement.UI.Areas.Mvc
@using VolleyManagement.UI.Helpers
@using VolleyManagement.UI.HtmlHelpers
@using DivisionConstants = VolleyManagement.Domain.Constants.Division
@using GroupConstants = VolleyManagement.Domain.Constants.Group
@using TournamentConstants = VolleyManagement.Domain.Constants.Tournament
@model VolleyManagement.UI.Areas.Mvc.ViewModels.Tournaments.TournamentViewModel
@* This partial view defines form fields that will appear when creating and editing entities *@

<link rel="stylesheet" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
<script src="//code.jquery.com/jquery-1.8.3.js" type="text/javascript"></script>
<script src="//code.jquery.com/ui/1.9.2/jquery-ui.js" type="text/javascript"></script>
<script src="~/Scripts/TournamentOperationScripts.js"></script>

<div class="editor-label">
    @Html.LabelFor(model => model.Name)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Name)
    @Html.ValidationMessage(TournamentConstants.UNIQUE_NAME_KEY)
    @Html.ValidationMessageFor(model => model.Name)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Description)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Description)
    @Html.ValidationMessageFor(model => model.Description)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Season)
</div>
<div class="editor-field">
    @Html.DropDownListFor(model => model.Season, new SelectList(Model.SeasonsList, "Key", "Value"))
    @Html.ValidationMessageFor(model => model.Season)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Scheme)
</div>
<div class="editor-field">
    @Html.DropDownListFor(model => model.Scheme, new SelectList(Model.TournamentSchemeList, Model.Scheme))
    @Html.ValidationMessageFor(model => model.Scheme)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.RegulationsLink)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.RegulationsLink)
    @Html.ValidationMessageFor(model => model.RegulationsLink)
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $.datepicker.setDefaults($.datepicker.regional['@JQueryUIDateFormatConverter.Localization'] = {
            monthNames: @JQueryUIDateFormatConverter.MonthNames,
            monthNamesShort: @JQueryUIDateFormatConverter.AbbreviatedMonthNames,
            dayNames: @JQueryUIDateFormatConverter.DayNames,
            dayNamesShort: @JQueryUIDateFormatConverter.AbbreviatedDayNames,
            dayNamesMin: @JQueryUIDateFormatConverter.ShortestDayNames,
            dateFormat: '@JQueryUIDateFormatConverter.JqueryUiCurrentDateFormat()'
        });

        $("#ApplyingPeriodStart").datepicker();
        $("#ApplyingPeriodEnd").datepicker();
        $('#GamesStart').datepicker();
        $("#GamesEnd").datepicker();
        $("#TransferStart").datepicker();
        $("#TransferEnd").datepicker();

        var transfer_fields = $(".transfer-field");
        $("#transferDatesSwitcher").change(function () {
            transfer_fields.attr("disabled", !this.checked);
            if (!this.checked) {
                transfer_fields.attr("value", "");
            }
        })
    });
</script>
<div class="editor-label">
    @Html.Label(Resources.UI.TournamentViews.RegistrationFieldsTitle)
</div>
<div class="editor-field">
    @Html.TextBoxForShortDate(model => model.ApplyingPeriodStart, Model.ApplyingPeriodStart, new { @readonly = "readonly" })
    -
    @Html.TextBoxForShortDate(model => model.ApplyingPeriodEnd, Model.ApplyingPeriodEnd, new { @readonly = "readonly" })

    @Html.ValidationMessage(TournamentConstants.APPLYING_START_DATE_AFTER_END_DATE)
    @Html.ValidationMessage(TournamentConstants.APPLYING_START_BEFORE_NOW)
    @Html.ValidationMessageFor(model => model.ApplyingPeriodStart)
    @Html.ValidationMessage(TournamentConstants.APPLYING_PERIOD_LESS_THREE_MONTH)
    @Html.ValidationMessageFor(model => model.ApplyingPeriodEnd)
</div>

<div class="editor-label">
    @Html.Label(Resources.UI.TournamentViews.TournamentFieldsTitle)
</div>
<div class="editor-field">
    @Html.TextBoxForShortDate(model => model.GamesStart, Model.GamesStart, new { @readonly = "readonly" })
    -
    @Html.TextBoxForShortDate(model => model.GamesEnd, Model.GamesEnd, new { @readonly = "readonly" })

    @Html.ValidationMessage(TournamentConstants.APPLYING_END_DATE_AFTER_START_GAMES)
    @Html.ValidationMessageFor(model => model.GamesStart)
    @Html.ValidationMessage(TournamentConstants.START_GAMES_AFTER_END_GAMES)
    @Html.ValidationMessage(TournamentConstants.TRANSFER_END_AFTER_GAMES_END)
    @Html.ValidationMessageFor(model => model.GamesEnd)
</div>
<div class="checkbox_transfer">
    @Html.CheckBoxFor(model => model.IsTransferEnabled, new { id = "transferDatesSwitcher" })
    @Html.Label(Resources.UI.TournamentViews.TransferFieldsTitle, new { @for = "transferDatesSwitcher" })
</div>
<div class="editor-field">
    @Html.Raw(
        Html.TextBoxForShortDate(
            model => model.TransferStart,
            Model.TransferStart,
            new { @readonly = "readonly", @class = "transfer-field", disabled = "disabled" })
        .ToHtmlString()
        .Replace("disabled=\"disabled\"", (Model.IsTransferEnabled ? "" : "disabled=\"disabled\"")))
    -
    @Html.Raw(
        Html.TextBoxForShortDate(
            model => model.TransferEnd,
            Model.TransferEnd,
            new { @readonly = "readonly", @class = "transfer-field", disabled = "disabled" })
        .ToHtmlString()
        .Replace("disabled=\"disabled\"", (Model.IsTransferEnabled ? "" : "disabled=\"disabled\"")))

    @Html.ValidationMessage(TournamentConstants.TRANSFER_PERIOD_BEFORE_GAMES_START)
    @Html.ValidationMessageFor(model => model.TransferStart)
    @Html.ValidationMessage(TournamentConstants.TRANSFER_END_BEFORE_TRANSFER_START)
    @Html.ValidationMessageFor(model => model.TransferEnd)
</div>

<div class="editor-label">@Html.LabelFor(model => model.Divisions)</div>
@if (Model.IsNew)
    {
<div id="Divisions">
</div>
<script>
                addNewDivisionInTournament({
                    maxDivisionsCount: @DivisionConstants.MAX_DIVISIONS_COUNT,
                    maxGroupsCount: @GroupConstants.MAX_GROUPS_COUNT,
                    minDivisionsCount: @DivisionConstants.MIN_DIVISIONS_COUNT,
                    minGroupsCount: @GroupConstants.MIN_GROUPS_COUNT
                    }, {
                    name: '@Resources.UI.ViewModelResources.DivisionDefaultName',
                    removeName: '@Resources.UI.TournamentViews.RemoveDivision'
                    }, {
                    title: '@Resources.UI.ViewModelResources.Groups',
                    name: '@Resources.UI.ViewModelResources.GroupDefaultName',
                    addName: '@Resources.UI.TournamentViews.AddGroup',
                    removeName: '@Resources.UI.TournamentViews.RemoveGroup'
                    })
</script>
    }
    else
    {
<div id="Divisions">
    @for (int i = 0; i < Model.Divisions.Count; i++)
            {
                string divisionWrapperId = String.Format("Division_{0}_Id", i);
                string divisionGroupsListWrapperId = String.Format("Division_{0}_Groups", i);
                string removeDivisionGroupsListWrapperId = String.Format("Remove_{0}", divisionWrapperId);

    <div id=@divisionWrapperId>
        @Html.HiddenFor(model => model.Divisions[i].Id)
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Divisions[i].Name, new { Name = "Divisions[@i].Name", disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.Divisions[i].Name)
            @if (Model.Divisions[i].IsEmpty)
                        {
            <a id=@removeDivisionGroupsListWrapperId class="link-button" hidden="@Model.IsDivisionsCountMin"
               onclick="removeDivision(@i, @DivisionConstants.MAX_DIVISIONS_COUNT, @DivisionConstants.MIN_DIVISIONS_COUNT,
                                @GroupConstants.MAX_GROUPS_COUNT, @GroupConstants.MIN_GROUPS_COUNT,
                                '@Resources.UI.ViewModelResources.GroupDefaultName', '@Resources.UI.TournamentViews.RemoveGroup')">
                @Resources.UI.TournamentViews.RemoveDivision
            </a>
                        }
        </div>
        <div class="division-groups-wrapper">
            <div class="editor-label">@Html.LabelFor(model => model.Divisions[i].Groups)</div>
            <div id=@divisionGroupsListWrapperId>
                @for (int j = 0; j < Model.Divisions[i].Groups.Count; j++)
                            {
                                string groupWrapperId = String.Format("Division_{0}_Group_{1}", i, j);
                                string removeGroupWrapperId = String.Format("Remove_{0}", groupWrapperId);

                <div id=@groupWrapperId class="editor-field group-editor">
                    @Html.HiddenFor(model => model.Divisions[i].Groups[j].Id)
                    @Html.TextBoxFor(model => model.Divisions[i].Groups[j].Name, new { name= "Divisions[@i].Groups[@j].Name", disabled= "disabled" })
                    @Html.ValidationMessageFor(model => model.Divisions[i].Groups[j].Name)

                    @if (Model.Divisions[i].Groups[j].IsEmpty)
                                    {
                    <a id=@removeGroupWrapperId class="link-button" hidden="@Model.Divisions[i].IsGroupsCountMin"
                       onClick="removeGroup(@i, @j, @GroupConstants.MAX_GROUPS_COUNT, @GroupConstants.MIN_GROUPS_COUNT)">
                        @Resources.UI.TournamentViews.RemoveGroup
                    </a>
                                    }
                </div>
                            }
            </div>
            @{
                            string addGroupButtonId = String.Format("Add_Division_{0}_Group", i);

                <div class="add-group-button">
                    <a id=@addGroupButtonId class="link-button" hidden="@Model.Divisions[i].IsGroupsCountMax"
                       onClick="addGroup(@i, @GroupConstants.MAX_GROUPS_COUNT, @GroupConstants.MIN_GROUPS_COUNT,
                                   '@Resources.UI.ViewModelResources.GroupDefaultName', '@Resources.UI.TournamentViews.RemoveGroup')">
                        @Resources.UI.TournamentViews.AddGroup
                    </a>
                </div>
            }
        </div>
    </div>
            }
</div>
    }
<div class="add-division-button">
    <a id="Add_Division" class="link-button" hidden="@Model.IsDivisionsCountMax"
       onClick="addNewDivisionInTournament({
                    maxDivisionsCount: @DivisionConstants.MAX_DIVISIONS_COUNT,
                    maxGroupsCount: @GroupConstants.MAX_GROUPS_COUNT,
                    minDivisionsCount: @DivisionConstants.MIN_DIVISIONS_COUNT,
                    minGroupsCount: @GroupConstants.MIN_GROUPS_COUNT
                    }, {
                    name: '@Resources.UI.ViewModelResources.DivisionDefaultName',
                    removeName: '@Resources.UI.TournamentViews.RemoveDivision'
                    }, {
                    title: '@Resources.UI.ViewModelResources.Groups',
                    name: '@Resources.UI.ViewModelResources.GroupDefaultName',
                    addName: '@Resources.UI.TournamentViews.AddGroup',
                    removeName: '@Resources.UI.TournamentViews.RemoveGroup'
                    })">
        @Resources.UI.TournamentViews.AddDivision
    </a>
</div>
