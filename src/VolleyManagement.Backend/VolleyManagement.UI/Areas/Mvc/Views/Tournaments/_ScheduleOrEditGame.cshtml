@model VolleyManagement.UI.Areas.Mvc.ViewModels.GameResults.GameViewModel
@using VolleyManagement.Domain.TournamentsAggregate;
@using VolleyManagement.UI.Helpers
@using VolleyManagement.UI.HtmlHelpers

<link rel="stylesheet" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
<script src="//code.jquery.com/jquery-1.8.3.js" type="text/javascript"></script>
<script src="//code.jquery.com/ui/1.9.2/jquery-ui.js" type="text/javascript"></script>

<legend>@Resources.UI.TournamentViews.ScheduleGameLegend</legend>
@Html.ValidationMessage("ValidationError", new { @class = "text-danger" })
@Html.HiddenFor(model => model.TournamentId)

@if (Model.TournamentScheme != TournamentSchemeEnum.PlayOff)
{
    <div class="editor-label">
        @Html.LabelFor(model => model.DivisionId)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.DivisionId, Model.DivisionList, new { @class = "form-control division-select" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.Round)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.Round, Model.RoundList, new { @class = "form-control round-select" })
    </div>
}
else
{
    @Html.HiddenFor(model => model.Round)
    @Html.HiddenFor(model => model.GameNumber);
}


@if (!(Model.TournamentScheme == TournamentSchemeEnum.PlayOff && !Model.IsFirstRoundGame))
{
    <div class="editor-label">
        @Html.LabelFor(model => model.HomeTeamId)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.HomeTeamId, Model.TeamList, new { @class = "form-control home-team-select" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.AwayTeamId)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.AwayTeamId, Model.TeamList, $"<{Resources.UI.TournamentViews.FreeDay}>", new { @class = "form-control away-team-select" })
    </div>
}
else
{
    @Html.HiddenFor(model => model.HomeTeamId);
    @Html.HiddenFor(model => model.AwayTeamId);
}

<script type="text/javascript">
    $(document).ready(function () {
        $.datepicker.setDefaults($.datepicker.regional['@JQueryUIDateFormatConverter.Localization'] = {
            monthNames: @JQueryUIDateFormatConverter.MonthNames,
            monthNamesShort: @JQueryUIDateFormatConverter.AbbreviatedMonthNames,
            dayNames: @JQueryUIDateFormatConverter.DayNames,
            dayNamesShort: @JQueryUIDateFormatConverter.AbbreviatedDayNames,
            dayNamesMin: @JQueryUIDateFormatConverter.ShortestDayNames,
            dateFormat: '@JQueryUIDateFormatConverter.JqueryUICurrentDateFormat()'
        });

        $("#GameDate").datepicker();
        $("#GameDate").addClass("form-control");
    });
</script>

<div class="editor-label">
    @Html.LabelFor(model => model.GameDate)
</div>
<div class="form-group editor-field">
    @Html.TextBoxForShortDate(model => model.GameDate, Model.GameDate, new { htmlAttributes = new { @class = "form-control" } })

    @Html.EditorFor(model => model.GameTime, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.GameDate, "", new { @class = "text-danger" })
</div>

@Scripts.Render("~/bundles/tournamentschedule")

